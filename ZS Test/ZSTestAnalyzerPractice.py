# -*- coding: utf-8 -*-
"""CSV import test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wwf7-MVBJv5dWaykZijaYF4VxWUFioGu

Package Import
"""



import csv
# import itertools
import pandas as pd
import plotly.express as px
import numpy as np 
# import io
# from sklearn import preprocessing
import plotly.graph_objects as go
# import numpy as np
from matplotlib import pyplot as plt
from matplotlib import rcParams
# import matplotlib.patches as patches


# Reading an excel file using Python
import xlrd

# Give the location of the file
loc = (r"C:\Users\Sommer Lab\Documents\Data\2022\01 Jan 2022\25 Jan\ZS_Test_Parameters_-_25_Jan.xls")


# To open Workbook
wb = xlrd.open_workbook(loc)
sheet = wb.sheet_by_index(0)

# For row 0 and column 0
print(sheet.cell_value(0, 0))



#print(sheet.cell_value(n, 7))





#Adjust the font size on the plots
rcParams.update({'font.size': 10})
#Input csv file in formate "scanX.csv"
filename = r"C:\Users\Sommer Lab\Documents\Data\2022\01 Jan 2022\25 Jan\scan20.csv"



"""# New Section"""

print("What is the scan number?")
n = int(input())
"Needs To Be Updated to Run!"
#print("How many pictures are you taking?")
Pictures_Taken = int(sheet.cell_value(n, 1))
#print(Pictures_Taken)
#print("What is this scan's Trigger Voltage?")
Start_Voltage = float(sheet.cell_value(n, 3))
#print(Start_Voltage)
#print("What was this scan's End Voltage Value?")
End_Voltage = float(sheet.cell_value(n, 4))
#print(End_Voltage)
#print("Input AOM frequency. Note: this code will automatically account for the double pass.")
AOM_Frequency = float()*2
#print(AOM_Frequency)
Correction_Frequency = int(sheet.cell_value(n, 12))

print("You will need to run this portion of the code twice.")
print("Your current offset frequency is ",Correction_Frequency,"MHz. Be sure this is up to date in your spreadsheet!")


"""TOPAS Data Processing"""

df=[]
P2P_Voltage = 83.22096-82.76787
P2P_Freq = 228
Shift_Per_Volt = P2P_Freq / P2P_Voltage 
D2_Transition_um = 0.670977338
K = 1 / D2_Transition_um




signals=[]
voltages=[]
Red_Shift=[]
Half_Shift=[]
Three_Half_Shift=[]
Half_Velocity45=[]
Three_Half_Velocity45=[]
#Open the TOPAS csv data
with open(filename, 'r') as f:
  variableNames = f.readline().split(";")
  #print(variableNames)
  #for i in range(10):
  while f:
    for i in range(1000):
      f.readline() #speed through 1000 lines



    line = f.readline()
    print("line = "+str(line))
    if line:
      line=line.split(";")
      # example: '83.126656;0.208156;\n'
      # line = ['83.126656', '0.208156', '\n']
      signals.append(float(line[1]))
      voltages.append(float(line[0]))
      Red_Shift.append((float(line[0])-End_Voltage)*Shift_Per_Volt)
      Half_Shift.append((float(line[0])-End_Voltage)*Shift_Per_Volt+Correction_Frequency)
      Three_Half_Shift.append((float(line[0])-End_Voltage)*Shift_Per_Volt + 228 + Correction_Frequency)
      Half_Velocity45.append(((float(line[0])-End_Voltage)*Shift_Per_Volt + Correction_Frequency)/(K)*2**(1/2))
      Three_Half_Velocity45.append(((float(line[0])-End_Voltage)*Shift_Per_Volt + 228 + Correction_Frequency)/(K)*2**(1/2))
    else:
      break



print("signals = "+str(signals))






'''
#plotly plot of laser scan vs. velocity of atoms resonant with the 3/2 laser per given laser frequency
ShiftA = px.line(df, x = Red_Shift, y = signals, title='SAS - Voltage Chart')
ShiftA.show(renderer = 'svg')
#above plot in pyplot
plt.figure()
plt.xlabel("Velocity resonant with 1/2 and 3/2 fibers at a particular scan frequency")
plt.ylabel("SAS Transmission intensity of probe")
plt.plot(Red_Shift, signals)
plt.show()




height = 2160
width = 2560
num_frames = 100
data_type = np.uint16

#ROI:
ymax=1200
ymin=800
yrange = ymax-ymin

xmax = 2000
xmin = 1400
xrange = xmax - xmin

#OPEN the file and load the data
#Change the file format to be scanX_counts.csv, for the camera counts data
filename = filename.split('.csv')[0]+"_counts.csv"
file = open(filename,"r")
# content = file.read()
# data_array = np.frombuffer(content,dtype=data_type)
# images = np.reshape(data_array,(num_frames,height,width))

# #Preview
# PreviewIndex = 2
# plt.imshow(images[PreviewIndex,:,:],cmap="gray", origin="lower",interpolation="nearest",vmin=150,vmax=5000)
# # Create a Rectangle patch
# rect = patches.Rectangle((xmin, ymin), xrange, yrange, linewidth=1, edgecolor='r', facecolor='none')
# # Add the patch to the Axes
# plt.gca().add_patch(rect)
# plt.figure(1)
# plt.show()
# plt.imshow(images[PreviewIndex,ymin:ymax,xmin:xmax],cmap="gray", origin="lower",interpolation="nearest",vmin=150,vmax=500)
# plt.figure(2)
# plt.show()

#Make the plot:
total_counts = np.zeros(num_frames)
with open(filename, "r") as f:
    reader = csv.reader(f, delimiter="\n")
    for i, row in enumerate(reader):
        total_counts[i] = row[0]
# for i in range(num_frames):
#     im_temp = images[i,ymin:ymax,xmin:xmax]
#     intensity = np.sum(im_temp)
#     total_counts[i] = intensity

# plt.figure(3)
# plt.plot(total_counts)

# Picture_Number = list(range(1,Pictures_Taken))

Adjusted_Counts = total_counts * 10**(-8) *0.5

temp = total_counts - min(total_counts)
Adjusted_Counts = temp/max(temp)


Frame_to_Voltage_Mapping=[]
Frame_to_Voltage_Mapping= [Start_Voltage + ((End_Voltage - Start_Voltage)/Pictures_Taken)*(i+1) for i in range(Pictures_Taken)] 
Volt_Map_to_HalfDetune_Map=[]
Volt_Map_to_HalfDetune_Map= [((Start_Voltage + ((End_Voltage - Start_Voltage)/Pictures_Taken)*(i+1)) -End_Voltage)*Shift_Per_Volt+Correction_Frequency for i in range(Pictures_Taken)] 
Detune_Map_to_HalfV45_Map=[]
Detune_Map_to_HalfV45_Map= [(((Start_Voltage + ((End_Voltage - Start_Voltage)/Pictures_Taken)*(i+1)) -End_Voltage)*Shift_Per_Volt+Correction_Frequency)/(K)*2**(1/2) for i in range(Pictures_Taken)] 
Volt_Map_to_3HalfDetune_Map=[]
Volt_Map_to_3HalfDetune_Map= [((Start_Voltage + ((End_Voltage - Start_Voltage)/Pictures_Taken)*(i+1)) -End_Voltage)*Shift_Per_Volt+228+Correction_Frequency for i in range(Pictures_Taken)] 
Detune_Map_to_3HalfV45_Map=[]
Detune_Map_to_3HalfV45_Map= [(((Start_Voltage + ((End_Voltage - Start_Voltage)/Pictures_Taken)*(i+1)) -End_Voltage)*Shift_Per_Volt+228+Correction_Frequency)/(K)*2**(1/2) for i in range(Pictures_Taken)] 


#plotly plot of pixel count vs. detuning from 3/2 transition
Cam23Freq = go.Figure(go.Scatter(x = Volt_Map_to_3HalfDetune_Map, y = Adjusted_Counts,
                  name='Camera Counts'))
Cam23Freq.update_layout(title='Detuning vs Pixel Count Relative to 3/2 Transition',
                    plot_bgcolor='rgb(230, 230,230)',
                    showlegend=True)
Cam23Freq.show(renderer = 'svg')
#pyplot plot
plt.figure()
plt.xlabel("Detuning Relative to 3/2 Transition")
plt.ylabel("Adjusted Pixel Count")
plt.plot(Volt_Map_to_3HalfDetune_Map, Adjusted_Counts)
plt.show()



#plotly plot of pixel count vs. velocity resonant with detuning from 3/2 transition
Cam23V45 = go.Figure(go.Scatter(x = Detune_Map_to_3HalfV45_Map, y = Adjusted_Counts,
                  name='Camera Counts'))
Cam23V45.update_layout(title='Velocity vs Pixel Count Relative to 3/2 Transition',
                    plot_bgcolor='rgb(230, 230,230)',
                    showlegend=True)
Cam23V45.show(renderer = 'svg')
#pyplot plot
plt.figure()
plt.xlabel("Velocity resonant with 1/2 and 3/2 fibers at a particular scan frequency")
plt.ylabel("Adjusted Pixel Count")
plt.plot(Detune_Map_to_3HalfV45_Map, Adjusted_Counts)
plt.show()



adjusted_signals = np.array(signals)-min(signals)
adjusted_signals = adjusted_signals/max(adjusted_signals)

#plotly plot of camera count vs. velocity on resonance with detuning from 3/2 transition, and topas data
Half3fig = go.Figure()
Half3fig.add_trace(go.Scatter(x=Detune_Map_to_3HalfV45_Map, y=Adjusted_Counts,
                    mode='lines',
                    name='3/2 Transition Camera Count'))
Half3fig.add_trace(go.Scatter(x=Three_Half_Velocity45, y=adjusted_signals,
                    mode='lines',
                    name='3/2 Transition TOPAS Data'))
Half3fig.show(renderer = 'svg')
#pyplot plot
# ax, =  plt.figure()
plt.xlabel("Velocity resonant with 1/2 and 3/2 fibers at a particular scan frequency")
plt.ylabel("Adjusted Camera Count")
plt.plot(Detune_Map_to_3HalfV45_Map, Adjusted_Counts, label = '3/2 Transition Camera Count')
plt.plot(Three_Half_Velocity45, adjusted_signals, label = '3/2 Transition TOPAS Data')
plt.legend(loc = 'best')
plt.show()


print(pd.DataFrame(sheet.row_values(n), sheet.row_values(0)))





'''







