# -*- coding: utf-8 -*-
"""CSV import test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wwf7-MVBJv5dWaykZijaYF4VxWUFioGu

Package Import
"""

import matplotlib.pyplot as plt
#from google.colab import files
import csv
import itertools
import pandas as pd
import plotly.express as px
import numpy as np 
import io
from sklearn import preprocessing
import plotly.graph_objects as go

"""Google Drive Permissions"""

#from google.colab import drive
#drive.mount('/content/drive')

"Needs To Be Updated to Run!"
print("How many pictures are you taking?")
Pictures_Taken = int(input())
print("What is this scan's Trigger Voltage?")
Start_Voltage = float(input())
print("What was this scan's End Voltage Value?")
End_Voltage = float(input())
print("Input AOM frequency. Note: this code will automatically account for the double pass.")
AOM_Frequency = float(input())*2

"""TOPAS Data Processing"""

df=[]
P2P_Voltage = 83.22096-82.76787
P2P_Freq = 228
Shift_Per_Volt = P2P_Freq / P2P_Voltage 
D2_Transition_um = 0.670977338
K = 1 / D2_Transition_um

print("You will need to run this portion of the code twice.")
print("Input your desired frequency offset. This should make it such that the produced graph's 1/2 transition peak aligns at +",AOM_Frequency,"MHz")
Correction_Frequency = int(input())

signals=[]
voltages=[]
Red_Shift=[]
Half_Shift=[]
Three_Half_Shift=[]
Half_Velocity45=[]
Three_Half_Velocity45=[]
with open('C:/Users/Sommer Lab/Documents/Data/2022/01 Jan 2022/12 Jan/scan1.csv', 'r') as f:
  variableNames = f.readline().split(";")
  #print(variableNames)
  #for i in range(10):
  while f:
    for i in range(1000):
      f.readline() #speed through 1000 lines


    line = f.readline()
    if line:
      line=line.split(";")
      # example: '83.126656;0.208156;\n'
      # line = ['83.126656', '0.208156', '\n']
      signals.append(float(line[1]))
      voltages.append(float(line[0]))
      Red_Shift.append((float(line[0])-End_Voltage)*Shift_Per_Volt)
      Half_Shift.append((float(line[0])-End_Voltage)*Shift_Per_Volt+Correction_Frequency)
      Three_Half_Shift.append((float(line[0])-End_Voltage)*Shift_Per_Volt + 228 + Correction_Frequency)
      Half_Velocity45.append(((float(line[0])-End_Voltage)*Shift_Per_Volt + Correction_Frequency)/(K)*2**(1/2))
      Three_Half_Velocity45.append(((float(line[0])-End_Voltage)*Shift_Per_Volt + 228 + Correction_Frequency)/(K)*2**(1/2))
    else:
      break

ShiftA = px.line(df, x = Red_Shift, y = signals, title='SAS - Voltage Chart')
ShiftA.show()

"""Extra Graphs if desired

Voltplt = px.line(df, x = voltages, y = signals, title='SAS - Voltage Chart')
Voltplt.show()


HalfRedplt = go.Figure(go.Scatter(x = Half_Shift, y = signals,
                  name='Wide Scan Line'))
HalfRedplt.update_layout(title='SAS - Red Shift Chart - Relative to 1/2 Transition',
                   plot_bgcolor='rgb(230, 230,230)',
                   showlegend=True)
HalfRedplt.show()

ThreeHalfRedplt = go.Figure(go.Scatter(x = Three_Half_Shift, y = signals,
                  name='Wide Scan Line'))
ThreeHalfRedplt.update_layout(title='SAS - Red Shift Chart - Relative to 3/2 Transition',
                   plot_bgcolor='rgb(230, 230,230)',
                   showlegend=True)
ThreeHalfRedplt.show()


HalfV45plt = go.Figure(go.Scatter(x = Half_Velocity45, y = signals,
                  name='Wide Scan Line'))
HalfV45plt.update_layout(title='SAS - 45 Degree Angle Velocity Chart - Relative to 1/2 Transition',
                   plot_bgcolor='rgb(230, 230,230)',
                   showlegend=True)
HalfV45plt.show()

ThreeHalfV45plt = go.Figure(go.Scatter(x = Three_Half_Velocity45, y = signals,
                  name='Wide Scan Line'))
ThreeHalfV45plt.update_layout(title='SAS - 45 Degree Angle Velocity Chart - Relative to 3/2 Transition',
                   plot_bgcolor='rgb(230, 230,230)',
                   showlegend=True)
ThreeHalfV45plt.show()

Camera Processing
"""

import numpy as np
import skimage as skim 
from matplotlib import pyplot as plt
import matplotlib.patches as patches
import imageio
import glob

height = 2160
width = 2560
num_frames = 100
data_type = np.uint16

#ROI:
ymax=1200
ymin=800
yrange = ymax-ymin

xmax = 2000
xmin = 1400
xrange = xmax - xmin

#OPEN the file and load the data
file = open("C:/Users/Sommer Lab/Documents/Data/2022/01 Jan 2022/12 Jan/scan1.dat","rb")
content = file.read()
data_array = np.frombuffer(content,dtype=data_type)
images = np.reshape(data_array,(num_frames,height,width))

#Preview
PreviewIndex = 2
plt.imshow(images[PreviewIndex,:,:],cmap="gray", origin="lower",interpolation="nearest",vmin=150,vmax=5000)
# Create a Rectangle patch
rect = patches.Rectangle((xmin, ymin), xrange, yrange, linewidth=1, edgecolor='r', facecolor='none')
# Add the patch to the Axes
plt.gca().add_patch(rect)
plt.show()
plt.imshow(images[PreviewIndex,ymin:ymax,xmin:xmax],cmap="gray", origin="lower",interpolation="nearest",vmin=150,vmax=500)
plt.show()

#Make the plot:
total_counts = np.zeros(num_frames)

for i in range(num_frames):
    im_temp = images[i,ymin:ymax,xmin:xmax]
    intensity = np.sum(im_temp)
    total_counts[i] = intensity

plt.plot(total_counts)

Picture_Number = list(range(1,Pictures_Taken))
"""
Camera = go.Figure(go.Scatter(x = Picture_Number, y = total_counts,
                  name='Wide Scan Line'))
Camera.update_layout(title='Camera Data - Frame Number vs Pixel Count',
                   plot_bgcolor='rgb(230, 230,230)',
                   showlegend=True)
Camera.show()
"""

"""Mapping Camera Signal onto Volt/Freq/V45 Scale"""

Adjusted_Counts = total_counts * 10**(-9) * 2
Frame_to_Voltage_Mapping=[]
Frame_to_Voltage_Mapping= [Start_Voltage + ((End_Voltage - Start_Voltage)/Pictures_Taken)*(i+1) for i in range(Pictures_Taken)] 
Volt_Map_to_HalfDetune_Map=[]
Volt_Map_to_HalfDetune_Map= [((Start_Voltage + ((End_Voltage - Start_Voltage)/Pictures_Taken)*(i+1)) -End_Voltage)*Shift_Per_Volt+Correction_Frequency for i in range(Pictures_Taken)] 
Detune_Map_to_HalfV45_Map=[]
Detune_Map_to_HalfV45_Map= [(((Start_Voltage + ((End_Voltage - Start_Voltage)/Pictures_Taken)*(i+1)) -End_Voltage)*Shift_Per_Volt+Correction_Frequency)/(K)*2**(1/2) for i in range(Pictures_Taken)] 

Volt_Map_to_3HalfDetune_Map=[]
Volt_Map_to_3HalfDetune_Map= [((Start_Voltage + ((End_Voltage - Start_Voltage)/Pictures_Taken)*(i+1)) -End_Voltage)*Shift_Per_Volt+228+Correction_Frequency for i in range(Pictures_Taken)] 
Detune_Map_to_3HalfV45_Map=[]
Detune_Map_to_3HalfV45_Map= [(((Start_Voltage + ((End_Voltage - Start_Voltage)/Pictures_Taken)*(i+1)) -End_Voltage)*Shift_Per_Volt+228+Correction_Frequency)/(K)*2**(1/2) for i in range(Pictures_Taken)] 



"""print(Frame_to_Voltage_Mapping)"""

"""
Cam2Volt = go.Figure(go.Scatter(x = Frame_to_Voltage_Mapping, y = Adjusted_Counts,
                  name='Camera Counts'))
Cam2Volt.update_layout(title='SAS - 45 Degree Angle Velocity Chart',
                   plot_bgcolor='rgb(230, 230,230)',
                   showlegend=True)
Cam2Volt.show()




Cam2Freq = go.Figure(go.Scatter(x = Volt_Map_to_HalfDetune_Map, y = Adjusted_Counts,
                  name='Camera Counts'))
Cam2Freq.update_layout(title='Detuning vs Pixel Count Relative to 1/2 Transition',
                   plot_bgcolor='rgb(230, 230,230)',
                   showlegend=True)
Cam2Freq.show()

Cam2V45 = go.Figure(go.Scatter(x = Detune_Map_to_HalfV45_Map, y = Adjusted_Counts,
                  name='Camera Counts'))
Cam2V45.update_layout(title='Velocity vs Pixel Count Relative to 1/2 Transition',
                   plot_bgcolor='rgb(230, 230,230)',
                   showlegend=True)
Cam2V45.show()




Cam23Freq = go.Figure(go.Scatter(x = Volt_Map_to_3HalfDetune_Map, y = Adjusted_Counts,
                  name='Camera Counts'))
Cam23Freq.update_layout(title='Detuning vs Pixel Count Relative to 3/2 Transition',
                   plot_bgcolor='rgb(230, 230,230)',
                   showlegend=True)
Cam23Freq.show()

Cam23V45 = go.Figure(go.Scatter(x = Detune_Map_to_3HalfV45_Map, y = Adjusted_Counts,
                  name='Camera Counts'))
Cam23V45.update_layout(title='Velocity vs Pixel Count Relative to 3/2 Transition',
                   plot_bgcolor='rgb(230, 230,230)',
                   showlegend=True)
Cam23V45.show()
"""

"""Camera + TOPAS Overlap"""

"""plt.plot(Detune_Map_to_V45_Map, Adjusted_Counts)
plt.plot(Velocity45, signals)
plt.show()"""

Halffig = go.Figure()
Halffig.add_trace(go.Scatter(x=Detune_Map_to_HalfV45_Map, y=Adjusted_Counts,
                    mode='lines',
                    name='1/2 Transition Camera Count'))
Halffig.add_trace(go.Scatter(x=Half_Velocity45, y=signals,
                    mode='lines',
                    name='1/2 Transition TOPAS Data'))
Halffig.add_trace(go.Scatter(x=Detune_Map_to_3HalfV45_Map, y=Adjusted_Counts,
                    mode='lines',
                    name='3/2 Transition Camera Count'))
Halffig.add_trace(go.Scatter(x=Three_Half_Velocity45, y=signals,
                    mode='lines',
                    name='3/2 Transition TOPAS Data'))

Halffig.show()